{"ast":null,"code":"import dateMath from '@elastic/datemath';\nimport moment from 'moment';\nimport { get } from '../../../services/objects';\nimport { isString } from '../../../services/predicate';\nimport { relativeUnitsFromLargestToSmallest } from './relative_options';\nvar ROUND_DELIMETER = '/';\nexport function parseRelativeParts(value) {\n  var matches = isString(value) && value.match(/now(([\\-\\+])([0-9]+)([smhdwMy])(\\/[smhdwMy])?)?/);\n  var isNow = matches && !matches[1];\n  var operator = matches && matches[2];\n  var count = matches && matches[3];\n  var unit = matches && matches[4];\n  var roundBy = matches && matches[5];\n\n  if (isNow) {\n    return {\n      count: 0,\n      unit: 's',\n      round: false\n    };\n  }\n\n  if (count && unit) {\n    var isRounded = roundBy ? true : false;\n    return {\n      count: parseInt(count, 10),\n      unit: operator === '+' ? \"\".concat(unit, \"+\") : unit,\n      round: isRounded,\n      roundUnit: isRounded ? roundBy.replace(ROUND_DELIMETER, '') : undefined\n    };\n  }\n\n  var results = {\n    count: 0,\n    unit: 's',\n    round: false\n  };\n  var duration = moment.duration(moment().diff(dateMath.parse(value)));\n  var unitOp = '';\n\n  for (var i = 0; i < relativeUnitsFromLargestToSmallest.length; i++) {\n    var as = duration.as(relativeUnitsFromLargestToSmallest[i]);\n    if (as < 0) unitOp = '+';\n\n    if (Math.abs(as) > 1) {\n      results.count = Math.round(Math.abs(as));\n      results.unit = relativeUnitsFromLargestToSmallest[i] + unitOp;\n      results.round = false;\n      break;\n    }\n  }\n\n  return results;\n}\nexport function toRelativeStringFromParts(relativeParts) {\n  var count = get(relativeParts, 'count', 0);\n  var isRounded = get(relativeParts, 'round', false);\n\n  if (count === 0 && !isRounded) {\n    return 'now';\n  }\n\n  var matches = get(relativeParts, 'unit', 's').match(/([smhdwMy])(\\+)?/);\n  var unit = matches[1];\n  var operator = matches && matches[2] ? matches[2] : '-';\n  var round = isRounded ? \"\".concat(ROUND_DELIMETER).concat(unit) : '';\n  return \"now\".concat(operator).concat(count).concat(unit).concat(round);\n}","map":{"version":3,"sources":["/home/ad.rapidops.com/jaymin.shah/project/demostruct/node_modules/@elastic/eui/es/components/date_picker/super_date_picker/relative_utils.js"],"names":["dateMath","moment","get","isString","relativeUnitsFromLargestToSmallest","ROUND_DELIMETER","parseRelativeParts","value","matches","match","isNow","operator","count","unit","roundBy","round","isRounded","parseInt","concat","roundUnit","replace","undefined","results","duration","diff","parse","unitOp","i","length","as","Math","abs","toRelativeStringFromParts","relativeParts"],"mappings":"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","sourcesContent":["import dateMath from '@elastic/datemath';\nimport moment from 'moment';\nimport { get } from '../../../services/objects';\nimport { isString } from '../../../services/predicate';\nimport { relativeUnitsFromLargestToSmallest } from './relative_options';\nvar ROUND_DELIMETER = '/';\nexport function parseRelativeParts(value) {\n  var matches = isString(value) && value.match(/now(([\\-\\+])([0-9]+)([smhdwMy])(\\/[smhdwMy])?)?/);\n  var isNow = matches && !matches[1];\n  var operator = matches && matches[2];\n  var count = matches && matches[3];\n  var unit = matches && matches[4];\n  var roundBy = matches && matches[5];\n\n  if (isNow) {\n    return {\n      count: 0,\n      unit: 's',\n      round: false\n    };\n  }\n\n  if (count && unit) {\n    var isRounded = roundBy ? true : false;\n    return {\n      count: parseInt(count, 10),\n      unit: operator === '+' ? \"\".concat(unit, \"+\") : unit,\n      round: isRounded,\n      roundUnit: isRounded ? roundBy.replace(ROUND_DELIMETER, '') : undefined\n    };\n  }\n\n  var results = {\n    count: 0,\n    unit: 's',\n    round: false\n  };\n  var duration = moment.duration(moment().diff(dateMath.parse(value)));\n  var unitOp = '';\n\n  for (var i = 0; i < relativeUnitsFromLargestToSmallest.length; i++) {\n    var as = duration.as(relativeUnitsFromLargestToSmallest[i]);\n    if (as < 0) unitOp = '+';\n\n    if (Math.abs(as) > 1) {\n      results.count = Math.round(Math.abs(as));\n      results.unit = relativeUnitsFromLargestToSmallest[i] + unitOp;\n      results.round = false;\n      break;\n    }\n  }\n\n  return results;\n}\nexport function toRelativeStringFromParts(relativeParts) {\n  var count = get(relativeParts, 'count', 0);\n  var isRounded = get(relativeParts, 'round', false);\n\n  if (count === 0 && !isRounded) {\n    return 'now';\n  }\n\n  var matches = get(relativeParts, 'unit', 's').match(/([smhdwMy])(\\+)?/);\n  var unit = matches[1];\n  var operator = matches && matches[2] ? matches[2] : '-';\n  var round = isRounded ? \"\".concat(ROUND_DELIMETER).concat(unit) : '';\n  return \"now\".concat(operator).concat(count).concat(unit).concat(round);\n}"]},"metadata":{},"sourceType":"module"}