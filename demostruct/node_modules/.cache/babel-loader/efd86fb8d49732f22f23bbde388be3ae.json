{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isEvenlyDivisibleBy = isEvenlyDivisibleBy;\nexports.isWithinRange = void 0;\n\nvar isWithinRange = function isWithinRange(min, max, value) {\n  if (min === '' || max === '' || value === '') {\n    return false;\n  }\n\n  var val = Number(value);\n  return Number(min) <= val && val <= Number(max);\n}; // 1e-6 covers up to 10,000,000,000 factored by a decimal\n\n\nexports.isWithinRange = isWithinRange;\nvar EPSILON = 1e-6;\n\nfunction isEvenlyDivisibleBy(num, factor) {\n  var remainder = num % factor; // due to floating point issues the remainder needs to be within a margin instead of exactly 0\n  // 1 % 0.1          === 0.09999999999999995\n  // 1000000000 % 0.1 === 0.09999994448884877\n  // 1 % 0.05         === 0.04999999999999995\n  // Compare the smaller of (remainder, factor - remainder) to EPSILON\n\n  return Math.min(remainder, // remainder may be smallest, it is 0 in the well-formed case\n  Math.abs(factor - remainder) // otherwise the positive difference between factor and remainder\n  ) < EPSILON;\n}","map":{"version":3,"sources":["/home/ad.rapidops.com/jaymin.shah/project/demostruct/node_modules/@elastic/eui/lib/services/number/number.js"],"names":["Object","defineProperty","exports","value","isEvenlyDivisibleBy","isWithinRange","min","max","val","Number","EPSILON","num","factor","remainder","Math","abs"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;AACAF,OAAO,CAACG,aAAR,GAAwB,KAAK,CAA7B;;AAEA,IAAIA,aAAa,GAAG,SAASA,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCJ,KAAjC,EAAwC;AAC1D,MAAIG,GAAG,KAAK,EAAR,IAAcC,GAAG,KAAK,EAAtB,IAA4BJ,KAAK,KAAK,EAA1C,EAA8C;AAC5C,WAAO,KAAP;AACD;;AAED,MAAIK,GAAG,GAAGC,MAAM,CAACN,KAAD,CAAhB;AACA,SAAOM,MAAM,CAACH,GAAD,CAAN,IAAeE,GAAf,IAAsBA,GAAG,IAAIC,MAAM,CAACF,GAAD,CAA1C;AACD,CAPD,C,CAOG;;;AAGHL,OAAO,CAACG,aAAR,GAAwBA,aAAxB;AACA,IAAIK,OAAO,GAAG,IAAd;;AAEA,SAASN,mBAAT,CAA6BO,GAA7B,EAAkCC,MAAlC,EAA0C;AACxC,MAAIC,SAAS,GAAGF,GAAG,GAAGC,MAAtB,CADwC,CACV;AAC9B;AACA;AACA;AACA;;AAEA,SAAOE,IAAI,CAACR,GAAL,CAASO,SAAT,EAAoB;AAC3BC,EAAAA,IAAI,CAACC,GAAL,CAASH,MAAM,GAAGC,SAAlB,CADO,CACsB;AADtB,MAEHH,OAFJ;AAGD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isEvenlyDivisibleBy = isEvenlyDivisibleBy;\nexports.isWithinRange = void 0;\n\nvar isWithinRange = function isWithinRange(min, max, value) {\n  if (min === '' || max === '' || value === '') {\n    return false;\n  }\n\n  var val = Number(value);\n  return Number(min) <= val && val <= Number(max);\n}; // 1e-6 covers up to 10,000,000,000 factored by a decimal\n\n\nexports.isWithinRange = isWithinRange;\nvar EPSILON = 1e-6;\n\nfunction isEvenlyDivisibleBy(num, factor) {\n  var remainder = num % factor; // due to floating point issues the remainder needs to be within a margin instead of exactly 0\n  // 1 % 0.1          === 0.09999999999999995\n  // 1000000000 % 0.1 === 0.09999994448884877\n  // 1 % 0.05         === 0.04999999999999995\n  // Compare the smaller of (remainder, factor - remainder) to EPSILON\n\n  return Math.min(remainder, // remainder may be smallest, it is 0 in the well-formed case\n  Math.abs(factor - remainder) // otherwise the positive difference between factor and remainder\n  ) < EPSILON;\n}"]},"metadata":{},"sourceType":"script"}