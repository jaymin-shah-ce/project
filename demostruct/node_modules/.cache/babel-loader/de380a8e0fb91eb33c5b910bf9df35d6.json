{"ast":null,"code":"import { isDateLike, isNumber } from '../../../services/predicate';\nimport { dateFormat as defaultDateFormat, dateGranularity } from './date_format';\nimport moment from 'moment';\nexport var DATE_TYPE = 'date';\nexport var dateValuesEqual = function dateValuesEqual(v1, v2) {\n  return v1.raw === v2.raw && v1.granularity === v2.granularity && v1.text === v2.text;\n};\nexport var isDateValue = function isDateValue(value) {\n  return !!value && value.type === DATE_TYPE && !!value.raw && !!value.text && !!value.resolve;\n};\nexport var dateValue = function dateValue(raw, granularity) {\n  var dateFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDateFormat;\n\n  if (!raw) {\n    return undefined;\n  }\n\n  if (isDateLike(raw)) {\n    return {\n      type: DATE_TYPE,\n      raw: raw,\n      granularity: granularity,\n      text: dateFormat.print(raw),\n      resolve: function resolve() {\n        return moment(raw);\n      }\n    };\n  }\n\n  if (isNumber(raw)) {\n    return {\n      type: DATE_TYPE,\n      raw: raw,\n      granularity: granularity,\n      text: raw.toString(),\n      resolve: function resolve() {\n        return moment(raw);\n      }\n    };\n  }\n\n  var text = raw.toString();\n  return {\n    type: DATE_TYPE,\n    raw: raw,\n    granularity: granularity,\n    text: text,\n    resolve: function resolve() {\n      return dateFormat.parse(text);\n    }\n  };\n};\nexport var dateValueParser = function dateValueParser() {\n  var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultDateFormat;\n  return function (text) {\n    var parsed = format.parse(text);\n    return dateValue(text, dateGranularity(parsed), format);\n  };\n};","map":{"version":3,"sources":["/home/ad.rapidops.com/jaymin.shah/project/demostruct/node_modules/@elastic/eui/es/components/search_bar/query/date_value.js"],"names":["isDateLike","isNumber","dateFormat","defaultDateFormat","dateGranularity","moment","DATE_TYPE","dateValuesEqual","v1","v2","raw","granularity","text","isDateValue","value","type","resolve","dateValue","arguments","length","undefined","print","toString","parse","dateValueParser","format","parsed"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,6BAArC;AACA,SAASC,UAAU,IAAIC,iBAAvB,EAA0CC,eAA1C,QAAiE,eAAjE;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,MAAhB;AACP,OAAO,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,EAAzB,EAA6BC,EAA7B,EAAiC;AAC5D,SAAOD,EAAE,CAACE,GAAH,KAAWD,EAAE,CAACC,GAAd,IAAqBF,EAAE,CAACG,WAAH,KAAmBF,EAAE,CAACE,WAA3C,IAA0DH,EAAE,CAACI,IAAH,KAAYH,EAAE,CAACG,IAAhF;AACD,CAFM;AAGP,OAAO,IAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AACnD,SAAO,CAAC,CAACA,KAAF,IAAWA,KAAK,CAACC,IAAN,KAAeT,SAA1B,IAAuC,CAAC,CAACQ,KAAK,CAACJ,GAA/C,IAAsD,CAAC,CAACI,KAAK,CAACF,IAA9D,IAAsE,CAAC,CAACE,KAAK,CAACE,OAArF;AACD,CAFM;AAGP,OAAO,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBP,GAAnB,EAAwBC,WAAxB,EAAqC;AAC1D,MAAIT,UAAU,GAAGgB,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEf,iBAArF;;AAEA,MAAI,CAACO,GAAL,EAAU;AACR,WAAOU,SAAP;AACD;;AAED,MAAIpB,UAAU,CAACU,GAAD,CAAd,EAAqB;AACnB,WAAO;AACLK,MAAAA,IAAI,EAAET,SADD;AAELI,MAAAA,GAAG,EAAEA,GAFA;AAGLC,MAAAA,WAAW,EAAEA,WAHR;AAILC,MAAAA,IAAI,EAAEV,UAAU,CAACmB,KAAX,CAAiBX,GAAjB,CAJD;AAKLM,MAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,eAAOX,MAAM,CAACK,GAAD,CAAb;AACD;AAPI,KAAP;AASD;;AAED,MAAIT,QAAQ,CAACS,GAAD,CAAZ,EAAmB;AACjB,WAAO;AACLK,MAAAA,IAAI,EAAET,SADD;AAELI,MAAAA,GAAG,EAAEA,GAFA;AAGLC,MAAAA,WAAW,EAAEA,WAHR;AAILC,MAAAA,IAAI,EAAEF,GAAG,CAACY,QAAJ,EAJD;AAKLN,MAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,eAAOX,MAAM,CAACK,GAAD,CAAb;AACD;AAPI,KAAP;AASD;;AAED,MAAIE,IAAI,GAAGF,GAAG,CAACY,QAAJ,EAAX;AACA,SAAO;AACLP,IAAAA,IAAI,EAAET,SADD;AAELI,IAAAA,GAAG,EAAEA,GAFA;AAGLC,IAAAA,WAAW,EAAEA,WAHR;AAILC,IAAAA,IAAI,EAAEA,IAJD;AAKLI,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,aAAOd,UAAU,CAACqB,KAAX,CAAiBX,IAAjB,CAAP;AACD;AAPI,GAAP;AASD,CAzCM;AA0CP,OAAO,IAAIY,eAAe,GAAG,SAASA,eAAT,GAA2B;AACtD,MAAIC,MAAM,GAAGP,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEf,iBAAjF;AACA,SAAO,UAAUS,IAAV,EAAgB;AACrB,QAAIc,MAAM,GAAGD,MAAM,CAACF,KAAP,CAAaX,IAAb,CAAb;AACA,WAAOK,SAAS,CAACL,IAAD,EAAOR,eAAe,CAACsB,MAAD,CAAtB,EAAgCD,MAAhC,CAAhB;AACD,GAHD;AAID,CANM","sourcesContent":["import { isDateLike, isNumber } from '../../../services/predicate';\nimport { dateFormat as defaultDateFormat, dateGranularity } from './date_format';\nimport moment from 'moment';\nexport var DATE_TYPE = 'date';\nexport var dateValuesEqual = function dateValuesEqual(v1, v2) {\n  return v1.raw === v2.raw && v1.granularity === v2.granularity && v1.text === v2.text;\n};\nexport var isDateValue = function isDateValue(value) {\n  return !!value && value.type === DATE_TYPE && !!value.raw && !!value.text && !!value.resolve;\n};\nexport var dateValue = function dateValue(raw, granularity) {\n  var dateFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDateFormat;\n\n  if (!raw) {\n    return undefined;\n  }\n\n  if (isDateLike(raw)) {\n    return {\n      type: DATE_TYPE,\n      raw: raw,\n      granularity: granularity,\n      text: dateFormat.print(raw),\n      resolve: function resolve() {\n        return moment(raw);\n      }\n    };\n  }\n\n  if (isNumber(raw)) {\n    return {\n      type: DATE_TYPE,\n      raw: raw,\n      granularity: granularity,\n      text: raw.toString(),\n      resolve: function resolve() {\n        return moment(raw);\n      }\n    };\n  }\n\n  var text = raw.toString();\n  return {\n    type: DATE_TYPE,\n    raw: raw,\n    granularity: granularity,\n    text: text,\n    resolve: function resolve() {\n      return dateFormat.parse(text);\n    }\n  };\n};\nexport var dateValueParser = function dateValueParser() {\n  var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultDateFormat;\n  return function (text) {\n    var parsed = format.parse(text);\n    return dateValue(text, dateGranularity(parsed), format);\n  };\n};"]},"metadata":{},"sourceType":"module"}