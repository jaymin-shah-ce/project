"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldValueToggleGroupFilter = exports.FieldValueToggleGroupFilterConfigType = exports.FieldValueToggleGroupFilterItemType = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _filter_group = require("../../filter_group");

var _prop_types = require("../../../utils/prop_types");

var _query = require("../query");

var FieldValueToggleGroupFilterItemType = _propTypes.default.shape({
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]).isRequired,
  name: _propTypes.default.string.isRequired,
  negatedName: _propTypes.default.string,
  operator: _propTypes.default.oneOf(['eq', 'exact', 'gt', 'gte', 'lt', 'lte'])
});

exports.FieldValueToggleGroupFilterItemType = FieldValueToggleGroupFilterItemType;

var FieldValueToggleGroupFilterConfigType = _propTypes.default.shape({
  type: _prop_types.EuiPropTypes.is('field_value_toggle_group').isRequired,
  field: _propTypes.default.string.isRequired,
  items: _propTypes.default.arrayOf(FieldValueToggleGroupFilterItemType).isRequired,
  available: _propTypes.default.func // () => boolean

});

exports.FieldValueToggleGroupFilterConfigType = FieldValueToggleGroupFilterConfigType;
var FieldValueToggleGroupFilterPropTypes = {
  index: _propTypes.default.number.isRequired,
  config: FieldValueToggleGroupFilterConfigType.isRequired,
  query: _propTypes.default.any.isRequired,
  onChange: _propTypes.default.func.isRequired // (value: boolean) => void

};

var FieldValueToggleGroupFilter =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(FieldValueToggleGroupFilter, _Component);

  function FieldValueToggleGroupFilter(props) {
    (0, _classCallCheck2.default)(this, FieldValueToggleGroupFilter);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FieldValueToggleGroupFilter).call(this, props));
  }

  (0, _createClass2.default)(FieldValueToggleGroupFilter, [{
    key: "resolveDisplay",
    value: function resolveDisplay(config, query, item) {
      var clause = query.getSimpleFieldClause(config.field, item.value);

      if (clause) {
        if (_query.Query.isMust(clause)) {
          return {
            active: true,
            name: item.name
          };
        }

        return {
          active: true,
          name: item.negatedName ? item.negatedName : "Not ".concat(item.name)
        };
      }

      return {
        active: false,
        name: item.name
      };
    }
  }, {
    key: "valueChanged",
    value: function valueChanged(item, active) {
      var field = this.props.config.field;
      var value = item.value,
          operator = item.operator;
      var query = active ? this.props.query.removeSimpleFieldClauses(field) : this.props.query.removeSimpleFieldClauses(field).addSimpleFieldValue(field, value, true, operator);
      this.props.onChange(query);
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          config = _this$props.config,
          query = _this$props.query;
      return config.items.map(function (item, index) {
        var _this$resolveDisplay = _this.resolveDisplay(config, query, item),
            active = _this$resolveDisplay.active,
            name = _this$resolveDisplay.name;

        var onClick = function onClick() {
          _this.valueChanged(item, active);
        };

        var key = "field_value_toggle_filter_item_".concat(index);
        var isLastItem = index === config.items.length - 1;
        return _react.default.createElement(_filter_group.EuiFilterButton, {
          key: key,
          onClick: onClick,
          hasActiveFilters: active,
          noDivider: !isLastItem,
          "aria-pressed": !!active,
          withNext: !isLastItem
        }, name);
      });
    }
  }]);
  return FieldValueToggleGroupFilter;
}(_react.Component);

exports.FieldValueToggleGroupFilter = FieldValueToggleGroupFilter;
(0, _defineProperty2.default)(FieldValueToggleGroupFilter, "propTypes", FieldValueToggleGroupFilterPropTypes);
FieldValueToggleGroupFilter.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "resolveDisplay",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "config",
      "type": null
    }, {
      "name": "query",
      "type": null
    }, {
      "name": "item",
      "type": null
    }],
    "returns": null
  }, {
    "name": "valueChanged",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "item",
      "type": null
    }, {
      "name": "active",
      "type": null
    }],
    "returns": null
  }],
  "displayName": "FieldValueToggleGroupFilter",
  "props": {
    "index": {
      "type": {
        "name": "number"
      },
      "required": true,
      "description": ""
    },
    "config": {
      "type": {
        "name": "custom",
        "raw": "FieldValueToggleGroupFilterConfigType.isRequired"
      },
      "required": false,
      "description": ""
    },
    "query": {
      "type": {
        "name": "any"
      },
      "required": true,
      "description": ""
    },
    "onChange": {
      "type": {
        "name": "func"
      },
      "required": true,
      "description": ""
    }
  }
};