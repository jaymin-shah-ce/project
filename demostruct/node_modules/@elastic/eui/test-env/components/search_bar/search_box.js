"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiSearchBox = exports.SearchBoxConfigPropTypes = exports.SchemaType = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _field_search = require("../form/field_search/field_search");

var _propTypes = _interopRequireDefault(require("prop-types"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SchemaType = _propTypes.default.shape({
  strict: _propTypes.default.bool,
  fields: _propTypes.default.object,
  flags: _propTypes.default.arrayOf(_propTypes.default.string)
});

exports.SchemaType = SchemaType;
var SearchBoxConfigPropTypes = {
  placeholder: _propTypes.default.string,
  incremental: _propTypes.default.bool,
  schema: SchemaType
};
exports.SearchBoxConfigPropTypes = SearchBoxConfigPropTypes;

var EuiSearchBox =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(EuiSearchBox, _Component);

  function EuiSearchBox(props) {
    (0, _classCallCheck2.default)(this, EuiSearchBox);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(EuiSearchBox).call(this, props));
  }

  (0, _createClass2.default)(EuiSearchBox, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(oldProps) {
      if (oldProps.query !== this.props.query) {
        this.inputElement.value = this.props.query;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          placeholder = _this$props.placeholder,
          query = _this$props.query,
          incremental = _this$props.incremental,
          _onSearch = _this$props.onSearch,
          isInvalid = _this$props.isInvalid,
          title = _this$props.title,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["placeholder", "query", "incremental", "onSearch", "isInvalid", "title"]);
      var ariaLabel;

      if (incremental) {
        ariaLabel = 'This is a search bar. As you type, the results lower in the page will automatically filter.';
      } else {
        ariaLabel = 'This is a search bar. After typing your query, hit enter to filter the results lower in the page.';
      }

      return _react.default.createElement(_field_search.EuiFieldSearch, (0, _extends2.default)({
        inputRef: function inputRef(input) {
          return _this.inputElement = input;
        },
        fullWidth: true,
        placeholder: placeholder,
        defaultValue: query,
        incremental: incremental,
        onSearch: function onSearch(query) {
          return _onSearch(query);
        },
        isInvalid: isInvalid,
        "aria-label": ariaLabel,
        title: title
      }, rest));
    }
  }]);
  return EuiSearchBox;
}(_react.Component);

exports.EuiSearchBox = EuiSearchBox;
(0, _defineProperty2.default)(EuiSearchBox, "propTypes", _objectSpread({
  query: _propTypes.default.string.isRequired,
  onSearch: _propTypes.default.func.isRequired,
  // (queryText) => void
  isInvalid: _propTypes.default.bool,
  title: _propTypes.default.string
}, SearchBoxConfigPropTypes));
(0, _defineProperty2.default)(EuiSearchBox, "defaultProps", {
  placeholder: 'Search...',
  incremental: false
});
EuiSearchBox.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiSearchBox",
  "props": {
    "placeholder": {
      "defaultValue": {
        "value": "'Search...'",
        "computed": false
      },
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "incremental": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "query": {
      "type": {
        "name": "string"
      },
      "required": true,
      "description": ""
    },
    "onSearch": {
      "type": {
        "name": "func"
      },
      "required": true,
      "description": ""
    },
    "isInvalid": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "title": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "schema": {
      "type": {
        "name": "custom",
        "raw": "SchemaType"
      },
      "required": false,
      "description": ""
    }
  }
};